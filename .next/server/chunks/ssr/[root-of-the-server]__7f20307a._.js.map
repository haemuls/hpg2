{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/game/game.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"game-module__h0mpaG__active\",\n  \"blind\": \"game-module__h0mpaG__blind\",\n  \"boardTable\": \"game-module__h0mpaG__boardTable\",\n  \"btn\": \"game-module__h0mpaG__btn\",\n  \"btnDark\": \"game-module__h0mpaG__btnDark\",\n  \"container\": \"game-module__h0mpaG__container\",\n  \"errorMessage\": \"game-module__h0mpaG__errorMessage\",\n  \"game\": \"game-module__h0mpaG__game\",\n  \"loadingMessage\": \"game-module__h0mpaG__loadingMessage\",\n  \"pageNumber\": \"game-module__h0mpaG__pageNumber\",\n  \"pageTitle\": \"game-module__h0mpaG__pageTitle\",\n  \"pagination\": \"game-module__h0mpaG__pagination\",\n  \"problemSelector\": \"game-module__h0mpaG__problemSelector\",\n  \"problemTypeSelector\": \"game-module__h0mpaG__problemTypeSelector\",\n  \"searchButton\": \"game-module__h0mpaG__searchButton\",\n  \"searchWindow\": \"game-module__h0mpaG__searchWindow\",\n  \"searchWrap\": \"game-module__h0mpaG__searchWrap\",\n  \"thAccuracy\": \"game-module__h0mpaG__thAccuracy\",\n  \"thDate\": \"game-module__h0mpaG__thDate\",\n  \"thDifficulty\": \"game-module__h0mpaG__thDifficulty\",\n  \"thNum\": \"game-module__h0mpaG__thNum\",\n  \"thTitle\": \"game-module__h0mpaG__thTitle\",\n  \"writeButtonWrap\": \"game-module__h0mpaG__writeButtonWrap\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/game/page.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport axios from \"axios\";\nimport styles from \"./game.module.css\";\nimport { getToken } from \"./tokenService\"; // JWT 토큰 관리 코드에서 import\n\nconst API_URL = \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/problems/completed\"; // 기본 API URL\n\ninterface Post {\n  id: number;\n  solved: boolean;\n  title: string;\n  level: string | null;\n  correctRate: number | null;\n  creator: string;\n  type: string | null;\n  lastModified: string;\n}\n\nconst ClientDate = ({ date }: { date: string }) => {\n  const [formattedDate, setFormattedDate] = useState(\"\");\n\n  useEffect(() => {\n    setFormattedDate(new Date(date).toLocaleDateString());\n  }, [date]);\n\n  return <>{formattedDate}</>;\n};\n\nconst GamePage = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"전체\");\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [size] = useState(25);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [sortKind, setSortKind] = useState(\"\");\n  const [desc, setDesc] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 로그인 여부 상태\n  const router = useRouter();\n\n  const membershipId = typeof window !== \"undefined\" ? localStorage.getItem(\"membershipId\") || \"99999\" : \"99999\";\n\n  useEffect(() => {\n    const adminStatus = localStorage.getItem(\"isAdmin\") === \"true\";\n    setIsAdmin(adminStatus);\n\n    const token = localStorage.getItem(\"jwtToken\"); // jwtToken을 통해 로그인 여부 확인\n    if (token) {\n      setIsLoggedIn(true); // 로그인 상태일 경우 true\n    }\n  }, []);\n\n  const handleSort = (column: string) => {\n    if (column === \"correctRate\" || column === \"lastModified\") {\n      setSortKind(column);\n      setDesc(prevDesc => (prevDesc && column === sortKind) ? !prevDesc : true);\n    }\n  };\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      setError(\"\");\n\n      try {\n        const jwtToken = await getToken(); // getToken 함수로 토큰을 가져옴\n        if (!jwtToken) {\n          throw new Error(\"로그인된 상태가 아닙니다.\");\n        }\n\n        const params = new URLSearchParams({\n          userId: membershipId,\n          type: \"WARGAME\",\n          kind: selectedType === \"전체\" ? \"\" : selectedType,\n          sortKind: sortKind,\n          desc: desc.toString(),\n          page: currentPage.toString(),\n          size: size.toString(),\n        });\n\n        const url = `${API_URL}?${params.toString()}`;\n\n        const response = await axios.get(url, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${jwtToken}`, // JWT 토큰을 헤더에 추가\n          },\n        });\n\n        if (!response.data) {\n          throw new Error(\"게시글 로딩 오류\");\n        }\n\n        setTotalPages(response.data.totalPages);\n\n        const formattedPosts = response.data.content.map((post: Post) => ({\n          id: post.id,\n          solved: post.solved,\n          title: post.title,\n          level: post.level,\n          correctRate: post.correctRate,\n          creator: post.creator,\n          type: post.type,\n          lastModified: post.lastModified,\n        }));\n\n        setPosts(formattedPosts);\n      } catch (error) {\n        setError(error instanceof Error ? error.message : \"게시글 로딩 오류\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [membershipId, currentPage, selectedType, size, sortKind, desc]);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true); // 로딩 상태 시작\n    setError(\"\"); // 기존 에러 메시지 초기화\n\n    try {\n      const jwtToken = await getToken(); // getToken 함수로 토큰을 가져옴\n      if (!jwtToken) {\n        throw new Error(\"로그인된 상태가 아닙니다.\");\n      }\n\n      const params = new URLSearchParams({\n        type: \"WARGAME\", // 타입은 WARGAME으로 고정\n        kind: selectedType === \"전체\" ? \"\" : selectedType, // 선택된 타입을 기준으로 설정\n        keyword: searchTerm, // 검색어로 전달\n        page: currentPage.toString(),\n        size: size.toString(),\n      });\n\n      const url = `${BASE_URL}/api/problems/search?${params.toString()}`;\n\n      const response = await axios.get(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${jwtToken}`, // JWT 토큰을 헤더에 추가\n        },\n      });\n\n      if (!response.data) {\n        throw new Error(\"검색 오류\");\n      }\n\n      setTotalPages(response.data.totalPages); // 전체 페이지 수 설정\n\n      const formattedPosts = response.data.content.map((post: Post) => ({\n        id: post.id,\n        solved: post.solved,\n        title: post.title,\n        level: post.level,\n        correctRate: post.correctRate,\n        creator: post.creator,\n        type: post.type,\n        lastModified: post.lastModified,\n      }));\n\n      setPosts(formattedPosts); // 검색된 문제 목록을 업데이트\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"검색 오류\");\n    } finally {\n      setLoading(false); // 로딩 상태 종료\n    }\n  };\n\n  const handleCreateButtonClick = () => {\n    if (!isLoggedIn) {\n      alert(\"로그인 후 문제를 제출할 수 있습니다.\");\n      return;\n    }\n    router.push(\"/game/game_create\");\n  };\n\n  const goToPage = (page: number) => {\n    if (page >= 0 && page < totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  const getLevelIcon = (level: string | null) => {\n    if (!level) {\n      return \"❓\";\n    }\n\n    const levelNumber = parseInt(level, 10);\n    if (levelNumber === 1) {\n      return \"⭐\";\n    } else if (levelNumber === 2) {\n      return \"⭐⭐\";\n    } else if (levelNumber === 3) {\n      return \"⭐⭐⭐\";\n    }\n\n    return \"❓\";\n  };\n\n  return (\n    <section className={styles.game}>\n      {/* 내용 생략 */}\n    </section>\n  );\n};\n\nexport default GamePage;\n"],"names":[],"mappings":"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","debugId":null}}]
}