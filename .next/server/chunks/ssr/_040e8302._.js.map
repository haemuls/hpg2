{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/game/game.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"game-module__h0mpaG__active\",\n  \"blind\": \"game-module__h0mpaG__blind\",\n  \"boardTable\": \"game-module__h0mpaG__boardTable\",\n  \"btn\": \"game-module__h0mpaG__btn\",\n  \"btnDark\": \"game-module__h0mpaG__btnDark\",\n  \"container\": \"game-module__h0mpaG__container\",\n  \"errorMessage\": \"game-module__h0mpaG__errorMessage\",\n  \"game\": \"game-module__h0mpaG__game\",\n  \"loadingMessage\": \"game-module__h0mpaG__loadingMessage\",\n  \"pageNumber\": \"game-module__h0mpaG__pageNumber\",\n  \"pageTitle\": \"game-module__h0mpaG__pageTitle\",\n  \"pagination\": \"game-module__h0mpaG__pagination\",\n  \"problemSelector\": \"game-module__h0mpaG__problemSelector\",\n  \"problemTypeSelector\": \"game-module__h0mpaG__problemTypeSelector\",\n  \"searchButton\": \"game-module__h0mpaG__searchButton\",\n  \"searchWindow\": \"game-module__h0mpaG__searchWindow\",\n  \"searchWrap\": \"game-module__h0mpaG__searchWrap\",\n  \"thAccuracy\": \"game-module__h0mpaG__thAccuracy\",\n  \"thDate\": \"game-module__h0mpaG__thDate\",\n  \"thDifficulty\": \"game-module__h0mpaG__thDifficulty\",\n  \"thNum\": \"game-module__h0mpaG__thNum\",\n  \"thTitle\": \"game-module__h0mpaG__thTitle\",\n  \"writeButtonWrap\": \"game-module__h0mpaG__writeButtonWrap\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/game/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport styles from \"./game.module.css\";\n\nconst API_URL = \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/problems/completed\"; // 기본 API URL\n\ninterface Post {\n  id: number;\n  solved: boolean;\n  title: string;\n  level: string | null;\n  correctRate: number | null;\n  creator: string;\n  type: string | null;\n  lastModified: string;\n}\n\nconst ClientDate = ({ date }: { date: string }) => {\n  const [formattedDate, setFormattedDate] = useState(\"\");\n\n  useEffect(() => {\n    setFormattedDate(new Date(date).toLocaleDateString());\n  }, [date]);\n\n  return <>{formattedDate}</>;\n};\n\nconst GamePage = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"전체\");\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [size] = useState(25);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [sortKind, setSortKind] = useState(\"\");\n  const [desc, setDesc] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 로그인 여부 상태\n  const router = useRouter();\n\n  const membershipId = typeof window !== \"undefined\" ? localStorage.getItem(\"membershipId\") || \"99999\" : \"99999\";\n\n  useEffect(() => {\n    const adminStatus = localStorage.getItem(\"isAdmin\") === \"true\";\n    setIsAdmin(adminStatus);\n\n    const token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      setIsLoggedIn(true); // 로그인 상태일 경우 true\n    }\n  }, []);\n\n  const handleSort = (column: string) => {\n    if (column === \"correctRate\" || column === \"lastModified\") {\n      setSortKind(column);\n      setDesc(prevDesc => (prevDesc && column === sortKind) ? !prevDesc : true);\n    }\n  };\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      setError(\"\");\n\n      try {\n        const params = new URLSearchParams({\n          userId: membershipId,\n          type: \"WARGAME\",\n          kind: selectedType === \"전체\" ? \"\" : selectedType,\n          sortKind: sortKind,\n          desc: desc.toString(),\n          page: currentPage.toString(),\n          size: size.toString(),\n        });\n\n        const url = `${API_URL}?${params.toString()}`;\n\n        const response = await fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem(\"jwtToken\")}`,\n          },\n        });\n\n        if (!response.ok) {\n          if (response.status === 403) {\n            throw new Error(\"권한이 없습니다.\");\n          }\n          throw new Error(\"네트워크 응답이 올바르지 않습니다.\");\n        }\n\n        const data = await response.json();\n        setTotalPages(data.totalPages);\n\n        const formattedPosts = data.content.map((post: Post) => ({\n          id: post.id,\n          solved: post.solved,\n          title: post.title,\n          level: post.level,\n          correctRate: post.correctRate,\n          creator: post.creator,\n          type: post.type,\n          lastModified: post.lastModified,\n        }));\n\n        setPosts(formattedPosts);\n      } catch (error) {\n        setError(error instanceof Error ? error.message : \"게시글 로딩 오류\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [membershipId, currentPage, selectedType, size, sortKind, desc]);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true); // 로딩 상태 시작\n    setError(\"\"); // 기존 에러 메시지 초기화\n\n    try {\n      const params = new URLSearchParams({\n        problemType: \"WARGAME\", // 타입은 WARGAME으로 고정\n        WargameKind: selectedType === \"전체\" ? \"\" : selectedType, // 선택된 타입을 기준으로 설정\n        keyword: searchTerm, // 검색어로 전달\n        page: currentPage.toString(),\n        size: size.toString(),\n      });\n\n      const url = `https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/problems/search?${params.toString()}`;\n\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Accept\": \"*/*\", // 헤더에서 accept 설정\n          \"Authorization\": `Bearer ${localStorage.getItem(\"jwtToken\")}`, // JWT 토큰을 헤더에 추가\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 403) {\n          throw new Error(\"권한이 없습니다.\");\n        }\n        throw new Error(\"네트워크 응답이 올바르지 않습니다.\");\n      }\n\n      const data = await response.json();\n      setTotalPages(data.totalPages); // 전체 페이지 수 설정\n\n      const formattedPosts = data.content.map((post: Post) => ({\n        id: post.id,\n        solved: post.solved,\n        title: post.title,\n        level: post.level,\n        correctRate: post.correctRate,\n        creator: post.creator,\n        type: post.type,\n        lastModified: post.lastModified,\n      }));\n\n      setPosts(formattedPosts); // 검색된 문제 목록을 업데이트\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"검색 오류\");\n    } finally {\n      setLoading(false); // 로딩 상태 종료\n    }\n  };\n\n  const handleCreateButtonClick = () => {\n    if (!isLoggedIn) {\n      alert(\"로그인 후 문제를 제출할 수 있습니다.\");\n      return;\n    }\n    router.push(\"/game/game_create\");\n  };\n\n  const goToPage = (page: number) => {\n    if (page >= 0 && page < totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  const getLevelIcon = (level: string | null) => {\n    if (!level) {\n      return \"❓\";\n    }\n\n    const levelNumber = parseInt(level, 10);\n    if (levelNumber === 1) {\n      return \"⭐\";\n    } else if (levelNumber === 2) {\n      return \"⭐⭐\";\n    } else if (levelNumber === 3) {\n      return \"⭐⭐⭐\";\n    }\n\n    return \"❓\";\n  };\n\n  return (\n    <section className={styles.game}>\n      <div className={styles.pageTitle}>\n        <div className={styles.container}>\n          <h3>문제</h3>\n        </div>\n      </div>\n\n      <div className={styles.problemTypeSelector}>\n        <div className={styles.container}>\n          <label htmlFor=\"problemType\" className={styles.blind}>\n            문제 종류 :\n          </label>\n          <select\n            id=\"problemType\"\n            value={selectedType}\n            onChange={(e) => setSelectedType(e.target.value)}\n            className={styles.problemSelector}\n          >\n            <option value=\"전체\">전체</option>\n            <option value=\"WEBHACKING\">webhacking</option>\n            <option value=\"SYSTEM\">pwnable</option>\n            <option value=\"REVERSING\">reversing</option>\n            <option value=\"CRYPTO\">crypto</option>\n          </select>\n        </div>\n      </div>\n\n      <div id={styles.boardList}>\n        <div className={styles.container}>\n          {loading ? (\n            <p className={styles.loadingMessage}>문제를 불러오는 중입니다...</p>\n          ) : (\n            <table className={styles.boardTable}>\n              <thead>\n                <tr>\n                  <th scope=\"col\" className={styles.thNum}></th>\n                  <th scope=\"col\" className={styles.thNum}>\n                    문제 번호\n                  </th>\n                  <th scope=\"col\" className={styles.thDifficulty}>\n                    난이도\n                  </th>\n                  <th scope=\"col\" className={styles.thTitle}>\n                    문제 제목\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className={styles.thAccuracy}\n                    onClick={() => handleSort(\"correctRate\")}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    정답율\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className={styles.thDate}\n                    onClick={() => handleSort(\"lastModified\")}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    마지막 수정일\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {error ? (\n                  <tr>\n                    <td colSpan={6} className={styles.errorMessage}>\n                      {error}\n                    </td>\n                  </tr>\n                ) : posts.length > 0 ? (\n                  posts.map((post) => (\n                    <tr key={post.id}>\n                      <td>{post.solved ? \"✅\" : \"\"}</td>\n                      <td>{post.id}</td>\n                      <td>{getLevelIcon(post.level)}</td>\n                      <td>\n                        <Link href={`/game/${post.id}`}>{post.title}</Link>\n                      </td>\n                      <td>{post.correctRate !== null ? `${post.correctRate.toFixed(0)}%` : \"-\"}</td>\n                      <td>\n                        <ClientDate date={post.lastModified} />\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={6}>문제가 없습니다. ㅠㅠ</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.pagination}>\n        {totalPages > 0 &&\n          Array.from({ length: totalPages }, (_, index) => (\n            <span\n              key={index}\n              className={`${styles.pageNumber} ${index === currentPage ? styles.active : \"\"}`}\n              onClick={() => goToPage(index)}\n            >\n              {index + 1}\n            </span>\n          ))}\n      </div>\n\n      <div className={styles.boardSearch}>\n        <div className={styles.container}>\n          <div className={styles.searchWindow}>\n            <form onSubmit={handleSearch}>\n              <div className={styles.searchWrap}>\n                <label htmlFor=\"search\" className={styles.blind}></label>\n                <input\n                  id=\"search\"\n                  type=\"search\"\n                  placeholder=\"검색어를 입력해주세요.\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className={styles.searchInput}\n                />\n                <button type=\"submit\" className={styles.searchButton}>\n                  검색\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.writeButtonWrap}>\n        <div className={styles.container}>\n          <button\n            type=\"button\"\n            className={styles.writeButton}\n            onClick={handleCreateButtonClick}\n            disabled={!isLoggedIn} // 로그인 안된 경우 버튼 비활성화\n          >\n            문제 만들기\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default GamePage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}