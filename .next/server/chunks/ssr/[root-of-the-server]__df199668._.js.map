{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/board/view/[id]/BoardDetail.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"btnDelete\": \"BoardDetail-module__4Bv4dq__btnDelete\",\n  \"btnPrimary\": \"BoardDetail-module__4Bv4dq__btnPrimary\",\n  \"commentContent\": \"BoardDetail-module__4Bv4dq__commentContent\",\n  \"commentItem\": \"BoardDetail-module__4Bv4dq__commentItem\",\n  \"commentMeta\": \"BoardDetail-module__4Bv4dq__commentMeta\",\n  \"commentSection\": \"BoardDetail-module__4Bv4dq__commentSection\",\n  \"commentTitle\": \"BoardDetail-module__4Bv4dq__commentTitle\",\n  \"container\": \"BoardDetail-module__4Bv4dq__container\",\n  \"formGroup\": \"BoardDetail-module__4Bv4dq__formGroup\",\n  \"metaInfo\": \"BoardDetail-module__4Bv4dq__metaInfo\",\n  \"title\": \"BoardDetail-module__4Bv4dq__title\",\n  \"titleRow\": \"BoardDetail-module__4Bv4dq__titleRow\",\n  \"viewerContainer\": \"BoardDetail-module__4Bv4dq__viewerContainer\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/token.ts"],"sourcesContent":["import axios from 'axios';\n\n// API URLs\nconst BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com'; // api 기본주소\nconst LOGIN_URL = `${BASE_URL}/login`; // 로그인 요청 url\nconst TOKEN_VALIDATE_URL = `${BASE_URL}/token-validate`; // 토큰 검증 요청 url\nconst TOKEN_REFRESH_URL = `${BASE_URL}/reissue`; // 엑세스 토큰 갱신\nconst USER_INFO_URL = `${BASE_URL}/api/users`; // 사용자 정보 가져오는 api\n\n// 사용자 정보 타입 정의\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  nickname: string;\n  membershipId: string;\n  // 필요한 필드를 여기에 추가하세요\n}\n\n// 로그인 요청\nexport const login = async (account: string, password: string) => {\n  try {\n    const response = await axios.post(LOGIN_URL, { account, password });\n    const { jwtToken, refreshToken, nickName, membershipId } = response.data; // 서버 응답에서 jwtToken, refreshToken, nickName, membershipId 추출\n\n    setTokens(jwtToken, refreshToken); // 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('nickname', nickName);\n    localStorage.setItem('membershipId', membershipId);\n\n    setAxiosDefaults();\n\n    return response.data;\n  } catch (error) {\n    console.error('로그인 실패:', error);\n    throw error;\n  }\n};\n\n// 토큰 검증 요청\nexport const validateToken = async (accessToken: string): Promise<boolean> => {\n  try {\n    const response = await axios.post(TOKEN_VALIDATE_URL, { jwtToken: accessToken });\n    return response.data === true;\n  } catch (error) {\n    console.error('토큰 검증 실패:', error);\n    return false;\n  }\n};\n\n// 리프레시 토큰을 통한 액세스 토큰 갱신 요청\nexport const refreshAccessToken = async (\n  membershipId: string,\n  accessToken: string,\n  refreshToken: string\n): Promise<string | null> => {\n  try {\n    const response = await axios.post(TOKEN_REFRESH_URL, {\n      membershipId,\n      jwtToken: accessToken,\n      refreshToken,\n    });\n\n    const { jwtToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\n    setTokens(newAccessToken, newRefreshToken); // 갱신된 refreshToken도 로컬 스토리지에 저장\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    clearTokens();\n    return null;\n  }\n};\n\n// 사용자 정보 요청\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  try {\n    const membershipId = localStorage.getItem('membershipId');\n    if (!membershipId) {\n      throw new Error('Membership ID not available');\n    }\n\n    const accessToken = await getValidAccessToken();\n    if (!accessToken) {\n      throw new Error('Access token not available');\n    }\n\n    // API 요청 보내기\n    const response = await axios.get<UserInfo>(`${USER_INFO_URL}/${membershipId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// 토큰 관리 함수\nexport const setTokens = (accessToken: string, refreshToken: string) => {\n  localStorage.setItem('jwtToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const getAccessToken = () => localStorage.getItem('jwtToken');\nexport const getRefreshToken = () => localStorage.getItem('refreshToken');\nexport const getMembershipId = () => localStorage.getItem('membershipId');\n\nexport const clearTokens = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('membershipId');\n};\n\n// 유효한 액세스 토큰을 반환하는 함수\nexport const getValidAccessToken = async (): Promise<string | null> => {\n  const accessToken = getAccessToken(); // jwtToken을 accessToken으로 대체\n  if (!accessToken) {\n    return null;\n  }\n\n  const isValid = await validateToken(accessToken); // accessToken으로 유효성 검사\n  if (!isValid) {\n    const refreshToken = getRefreshToken();\n    const membershipId = getMembershipId();\n    if (refreshToken && membershipId) {\n      const newAccessToken = await refreshAccessToken(membershipId, accessToken, refreshToken); // 새로운 accessToken으로 갱신\n      return newAccessToken;\n    }\n    return null;\n  }\n\n  return accessToken; // 유효한 accessToken 반환\n};\n\n// Axios 기본 헤더 설정\nexport const setAxiosDefaults = () => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/board/view/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport styles from './BoardDetail.module.css';\nimport { getAccessToken } from '../../../../../token';\nimport { useParams, useRouter } from 'next/navigation';\n\nconst Viewer = dynamic(() => import('@toast-ui/react-editor').then((mod) => mod.Viewer), { ssr: false });\n\ninterface Post {\n  id: number;\n  title: string;\n  contents: string;\n  creator: { nickname: string };\n  createdAt: string;\n  formattedDate: string;\n}\n\ninterface Comment {\n  id: number;\n  content: string;\n  creator?: { nickname: string };\n  createdAt: string;\n}\n\ninterface CommentResponse {\n  id: number;\n  content: string;\n  creator?: { nickname: string };\n  createdAt: string;\n}\n\nconst BoardDetailPage = () => {\n  const params = useParams();\n  const router = useRouter();\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [newComment, setNewComment] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPost = async (id: string) => {\n    setLoading(true);\n    try {\n      const token = getAccessToken();\n      const response = await fetch(`https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/boards/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) throw new Error('게시글 로딩 오류!');\n      const data = await response.json();\n      setPost({\n        ...data.result,\n        formattedDate: new Date(data.result.createdAt).toLocaleDateString(),\n        creator: data.result.creator || { nickname: '알 수 없음' },\n      });\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('게시글 로딩 오류!');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchComments = async (id: string) => {\n    try {\n      const token = getAccessToken();\n      if (!token) {\n        setError('로그인 하세요!');\n        router.push('/login'); // 로그인 페이지로 리디렉션\n        return;\n      }\n\n      const response = await fetch(`https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/comments/board/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) throw new Error('댓글 로딩 오류!');\n      const data: { result: CommentResponse[] } = await response.json();\n\n      setComments(\n        data.result\n          .map((c) => ({\n            id: c.id,\n            content: c.content,\n            creator: c.creator || { nickname: '익명 사용자' },\n            createdAt: c.createdAt,\n          }))\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()) // 최신순 정렬\n      );\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('댓글 로딩 오류!');\n      }\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!post) return;\n\n    const token = getAccessToken();\n    if (!token) {\n      setError('로그인이 필요합니다.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/boards/${post.id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('게시글 삭제에 실패했습니다.');\n      router.push('/board');\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('게시글 삭제 중 문제가 발생했습니다.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    const loadParams = async () => {\n      const id = Array.isArray(params?.id) ? params.id[0] : params?.id;\n      if (id) {\n        await fetchPost(id);\n        await fetchComments(id);\n      }\n    };\n\n    loadParams();\n  }, [params]);\n\n  const handleCommentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n\n    setIsSubmitting(true);\n    try {\n      const token = getAccessToken();\n      if (!token) throw new Error('로그인이 필요합니다.');\n\n      const response = await fetch('https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n          Accept: '*/*',\n        },\n        body: JSON.stringify({\n          type: 'PROBLEM',\n          parentId: post?.id || 0,\n          contents: newComment,\n        }),\n      });\n\n      if (!response.ok) throw new Error('댓글 등록에 실패했습니다.');\n      const data = await response.json();\n\n      setComments((prev) =>\n        [\n          {\n            id: data.result.id,\n            content: data.result.content,\n            creator: { nickname: data.result.creator.nickname },\n            createdAt: data.result.createdAt,\n          },\n          ...prev,\n        ].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()) // 최신순 정렬\n      );\n      setNewComment('');\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('댓글 등록 중 문제가 발생했습니다.');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (loading) return <p>게시글을 불러오는 중입니다...</p>;\n  if (error) return <p>{error}</p>;\n  if (!post) return <p>게시글을 찾을 수 없습니다.</p>;\n\n  const canDelete = post.creator.nickname === localStorage.getItem('nickname');\n\n  return (\n    <section className={styles.container}>\n      <div>\n        <h3 className={styles.title}>{post.title}</h3>\n        <p className={styles.metaInfo}>\n          <span>{post.creator.nickname}</span> | <span>{post.formattedDate}</span>\n        </p>\n        <div className={styles.viewerContainer}>\n          <Viewer initialValue={post.contents} />\n        </div>\n\n        {canDelete && (\n          <button onClick={handleDelete} className={styles.btnDelete}>\n            삭제\n          </button>\n        )}\n\n        <div className={styles.commentSection}>\n          <h4 className={styles.commentTitle}>댓글</h4>\n          <form onSubmit={handleCommentSubmit} className={styles.formGroup}>\n            <textarea\n              value={newComment}\n              onChange={(e) => setNewComment(e.target.value)}\n              placeholder=\"댓글을 입력하세요...\"\n            />\n            <button type=\"submit\" disabled={isSubmitting} className={styles.btnPrimary}>\n              {isSubmitting ? '등록 중...' : '등록'}\n            </button>\n          </form>\n\n          <ul>\n            {comments.map((c) => (\n              <li key={c.id} className={styles.commentItem}>\n                <p>\n                  <strong>{c.creator?.nickname || '익명 사용자'}</strong>\n                </p>\n                <p className={styles.commentContent}>{c.content}</p>\n                <span className={styles.commentMeta}>\n                  | {new Date(c.createdAt).toLocaleDateString()}\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default BoardDetailPage;"],"names":[],"mappings":"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","debugId":null}}]
}