{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/token.ts"],"sourcesContent":["import axios from 'axios';\n\n// API URLs\nconst BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com'; // api 기본주소\nconst LOGIN_URL = `${BASE_URL}/login`; // 로그인 요청 url\nconst TOKEN_VALIDATE_URL = `${BASE_URL}/token-validate`; // 토큰 검증 요청 url\nconst TOKEN_REFRESH_URL = `${BASE_URL}/reissue`; // 엑세스 토큰 갱신\nconst USER_INFO_URL = `${BASE_URL}/api/users`; // 사용자 정보 가져오는 api\n\n// 사용자 정보 타입 정의\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  nickname: string;\n  membershipId: string;\n  // 필요한 필드를 여기에 추가하세요\n}\n\n// 로그인 요청\nexport const login = async (account: string, password: string) => {\n  try {\n    const response = await axios.post(LOGIN_URL, { account, password });\n    const { jwtToken, refreshToken, nickName, membershipId } = response.data; // 서버 응답에서 jwtToken, refreshToken, nickName, membershipId 추출\n\n    setTokens(jwtToken, refreshToken); // 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('nickname', nickName);\n    localStorage.setItem('membershipId', membershipId);\n\n    setAxiosDefaults();\n\n    return response.data;\n  } catch (error) {\n    console.error('로그인 실패:', error);\n    throw error;\n  }\n};\n\n// 토큰 검증 요청\nexport const validateToken = async (accessToken: string): Promise<boolean> => {\n  try {\n    const response = await axios.post(TOKEN_VALIDATE_URL, { jwtToken: accessToken });\n    return response.data === true;\n  } catch (error) {\n    console.error('토큰 검증 실패:', error);\n    return false;\n  }\n};\n\n// 리프레시 토큰을 통한 액세스 토큰 갱신 요청\nexport const refreshAccessToken = async (\n  membershipId: string,\n  accessToken: string,\n  refreshToken: string\n): Promise<string | null> => {\n  try {\n    const response = await axios.post(TOKEN_REFRESH_URL, {\n      membershipId,\n      jwtToken: accessToken,\n      refreshToken,\n    });\n\n    const { jwtToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\n    setTokens(newAccessToken, newRefreshToken); // 갱신된 refreshToken도 로컬 스토리지에 저장\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    clearTokens();\n    return null;\n  }\n};\n\n// 사용자 정보 요청\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  try {\n    const membershipId = localStorage.getItem('membershipId');\n    if (!membershipId) {\n      throw new Error('Membership ID not available');\n    }\n\n    const accessToken = await getValidAccessToken();\n    if (!accessToken) {\n      throw new Error('Access token not available');\n    }\n\n    // API 요청 보내기\n    const response = await axios.get<UserInfo>(`${USER_INFO_URL}/${membershipId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// 토큰 관리 함수\nexport const setTokens = (accessToken: string, refreshToken: string) => {\n  localStorage.setItem('jwtToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const getAccessToken = () => localStorage.getItem('jwtToken');\nexport const getRefreshToken = () => localStorage.getItem('refreshToken');\nexport const getMembershipId = () => localStorage.getItem('membershipId');\n\nexport const clearTokens = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('membershipId');\n};\n\n// 유효한 액세스 토큰을 반환하는 함수\nexport const getValidAccessToken = async (): Promise<string | null> => {\n  const accessToken = getAccessToken(); // jwtToken을 accessToken으로 대체\n  if (!accessToken) {\n    return null;\n  }\n\n  const isValid = await validateToken(accessToken); // accessToken으로 유효성 검사\n  if (!isValid) {\n    const refreshToken = getRefreshToken();\n    const membershipId = getMembershipId();\n    if (refreshToken && membershipId) {\n      const newAccessToken = await refreshAccessToken(membershipId, accessToken, refreshToken); // 새로운 accessToken으로 갱신\n      return newAccessToken;\n    }\n    return null;\n  }\n\n  return accessToken; // 유효한 accessToken 반환\n};\n\n// Axios 기본 헤더 설정\nexport const setAxiosDefaults = () => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/ranking/ranking.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"ranking-module__fBvUNa__active\",\n  \"boardTable\": \"ranking-module__fBvUNa__boardTable\",\n  \"btn\": \"ranking-module__fBvUNa__btn\",\n  \"btnDark\": \"ranking-module__fBvUNa__btnDark\",\n  \"btnLight\": \"ranking-module__fBvUNa__btnLight\",\n  \"cell\": \"ranking-module__fBvUNa__cell\",\n  \"container\": \"ranking-module__fBvUNa__container\",\n  \"cursorPointer\": \"ranking-module__fBvUNa__cursorPointer\",\n  \"errorMessage\": \"ranking-module__fBvUNa__errorMessage\",\n  \"loadingMessage\": \"ranking-module__fBvUNa__loadingMessage\",\n  \"navbar\": \"ranking-module__fBvUNa__navbar\",\n  \"notice\": \"ranking-module__fBvUNa__notice\",\n  \"pageNumber\": \"ranking-module__fBvUNa__pageNumber\",\n  \"pageTitle\": \"ranking-module__fBvUNa__pageTitle\",\n  \"pagination\": \"ranking-module__fBvUNa__pagination\",\n  \"ranking\": \"ranking-module__fBvUNa__ranking\",\n  \"rankingTitle\": \"ranking-module__fBvUNa__rankingTitle\",\n  \"row\": \"ranking-module__fBvUNa__row\",\n  \"searchWindow\": \"ranking-module__fBvUNa__searchWindow\",\n  \"searchWrap\": \"ranking-module__fBvUNa__searchWrap\",\n  \"sortedAsc\": \"ranking-module__fBvUNa__sortedAsc\",\n  \"sortedDesc\": \"ranking-module__fBvUNa__sortedDesc\",\n  \"spin\": \"ranking-module__fBvUNa__spin\",\n  \"spinner\": \"ranking-module__fBvUNa__spinner\",\n  \"table\": \"ranking-module__fBvUNa__table\",\n  \"thAuthor\": \"ranking-module__fBvUNa__thAuthor\",\n  \"thDate\": \"ranking-module__fBvUNa__thDate\",\n  \"thNum\": \"ranking-module__fBvUNa__thNum\",\n  \"thTitle\": \"ranking-module__fBvUNa__thTitle\",\n  \"writeBtnWrap\": \"ranking-module__fBvUNa__writeBtnWrap\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/ranking/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from \"react\";\nimport { getAccessToken } from \"../../../token\";\nimport styles from \"./ranking.module.css\"; // CSS 모듈\n\nconst API_BASE_URL = \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/users/sorted-by-score\";\n\ninterface User {\n  rank: number;\n  nickname: string;\n  solvedCount: number;\n  lastActived: string;\n}\n\nconst RankingPage = () => {\n  const [ranking, setRanking] = useState<User[]>([]);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    const storedToken = getAccessToken();\n    setToken(storedToken);\n  }, []);\n\n  useEffect(() => {\n    // 초기 상태 처리: token이 null일 때는 작업하지 않음\n    if (token === null) {\n      return;\n    }\n\n    if (!token) {\n      alert(\"토큰이 존재하지 않습니다. 로그인 후 다시 시도해주세요.\");\n      return;\n    }\n\n    const fetchRankingData = async () => {\n      try {\n        const res = await fetch(API_BASE_URL, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*',\n          },\n        });\n\n        if (!res.ok) {\n          throw new Error(`랭킹 API 호출 실패: ${res.status} ${res.statusText}`);\n        }\n\n        const data = await res.json();\n        setRanking(data.result.content);\n      } catch (error) {\n        console.error(\"랭킹 조회 실패:\", error);\n      }\n    };\n\n    fetchRankingData();\n  }, [token]);\n\n  return (\n    <div className={styles.ranking}>\n      <div className={styles.rankingTitle}>\n        <h3>랭킹</h3>\n      </div>\n      <div className={styles.container}>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th className={styles.thNum}>순위</th>\n              <th className={styles.thTitle}>닉네임</th>\n              <th className={styles.thNum}>점수</th>\n              <th className={styles.thDate}>마지막 로그인</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((user, index) => (\n              <tr key={index} className={styles.row}>\n                <td className={styles.cell}>{user.rank}</td>\n                <td className={styles.cell}>{user.nickname}</td>\n                <td className={styles.cell}>{user.solvedCount}</td>\n                <td className={styles.cell}>{new Date(user.lastActived).toLocaleDateString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default RankingPage;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA,yPAA2C,SAAS;;;AAJpD;;;;AAMA,MAAM,eAAe;AASrB,MAAM,cAAc;;IAClB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IACjD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM,cAAc,CAAA,GAAA,wGAAA,CAAA,iBAAc,AAAD;YACjC,SAAS;QACX;gCAAG,EAAE;IAEL,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,oCAAoC;YACpC,IAAI,UAAU,MAAM;gBAClB;YACF;YAEA,IAAI,CAAC,OAAO;gBACV,MAAM;gBACN;YACF;YAEA,MAAM;0DAAmB;oBACvB,IAAI;wBACF,MAAM,MAAM,MAAM,MAAM,cAAc;4BACpC,QAAQ;4BACR,SAAS;gCACP,iBAAiB,CAAC,OAAO,EAAE,OAAO;gCAClC,UAAU;4BACZ;wBACF;wBAEA,IAAI,CAAC,IAAI,EAAE,EAAE;4BACX,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE,IAAI,UAAU,EAAE;wBACjE;wBAEA,MAAM,OAAO,MAAM,IAAI,IAAI;wBAC3B,WAAW,KAAK,MAAM,CAAC,OAAO;oBAChC,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,aAAa;oBAC7B;gBACF;;YAEA;QACF;gCAAG;QAAC;KAAM;IAEV,qBACE,6LAAC;QAAI,WAAW,+IAAA,CAAA,UAAM,CAAC,OAAO;;0BAC5B,6LAAC;gBAAI,WAAW,+IAAA,CAAA,UAAM,CAAC,YAAY;0BACjC,cAAA,6LAAC;8BAAG;;;;;;;;;;;0BAEN,6LAAC;gBAAI,WAAW,+IAAA,CAAA,UAAM,CAAC,SAAS;0BAC9B,cAAA,6LAAC;oBAAM,WAAW,+IAAA,CAAA,UAAM,CAAC,KAAK;;sCAC5B,6LAAC;sCACC,cAAA,6LAAC;;kDACC,6LAAC;wCAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,KAAK;kDAAE;;;;;;kDAC7B,6LAAC;wCAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,OAAO;kDAAE;;;;;;kDAC/B,6LAAC;wCAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,KAAK;kDAAE;;;;;;kDAC7B,6LAAC;wCAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,MAAM;kDAAE;;;;;;;;;;;;;;;;;sCAGlC,6LAAC;sCACE,QAAQ,GAAG,CAAC,CAAC,MAAM,sBAClB,6LAAC;oCAAe,WAAW,+IAAA,CAAA,UAAM,CAAC,GAAG;;sDACnC,6LAAC;4CAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,IAAI;sDAAG,KAAK,IAAI;;;;;;sDACtC,6LAAC;4CAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,IAAI;sDAAG,KAAK,QAAQ;;;;;;sDAC1C,6LAAC;4CAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,IAAI;sDAAG,KAAK,WAAW;;;;;;sDAC7C,6LAAC;4CAAG,WAAW,+IAAA,CAAA,UAAM,CAAC,IAAI;sDAAG,IAAI,KAAK,KAAK,WAAW,EAAE,kBAAkB;;;;;;;mCAJnE;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYvB;GAzEM;KAAA;uCA2ES","debugId":null}}]
}