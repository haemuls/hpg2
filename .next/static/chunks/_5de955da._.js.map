{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/notice/board.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"board-module__FJwxpW__active\",\n  \"boardTable\": \"board-module__FJwxpW__boardTable\",\n  \"btn\": \"board-module__FJwxpW__btn\",\n  \"btnDark\": \"board-module__FJwxpW__btnDark\",\n  \"btnLight\": \"board-module__FJwxpW__btnLight\",\n  \"container\": \"board-module__FJwxpW__container\",\n  \"cursorPointer\": \"board-module__FJwxpW__cursorPointer\",\n  \"errorMessage\": \"board-module__FJwxpW__errorMessage\",\n  \"loadingMessage\": \"board-module__FJwxpW__loadingMessage\",\n  \"notice\": \"board-module__FJwxpW__notice\",\n  \"pageNumber\": \"board-module__FJwxpW__pageNumber\",\n  \"pageTitle\": \"board-module__FJwxpW__pageTitle\",\n  \"pagination\": \"board-module__FJwxpW__pagination\",\n  \"searchWindow\": \"board-module__FJwxpW__searchWindow\",\n  \"searchWrap\": \"board-module__FJwxpW__searchWrap\",\n  \"sortedAsc\": \"board-module__FJwxpW__sortedAsc\",\n  \"sortedDesc\": \"board-module__FJwxpW__sortedDesc\",\n  \"spin\": \"board-module__FJwxpW__spin\",\n  \"spinner\": \"board-module__FJwxpW__spinner\",\n  \"thAuthor\": \"board-module__FJwxpW__thAuthor\",\n  \"thDate\": \"board-module__FJwxpW__thDate\",\n  \"thNum\": \"board-module__FJwxpW__thNum\",\n  \"thTitle\": \"board-module__FJwxpW__thTitle\",\n  \"writeBtnWrap\": \"board-module__FJwxpW__writeBtnWrap\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/token.ts"],"sourcesContent":["import axios from 'axios';\n\n// API URLs\nconst BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com'; // api 기본주소\nconst LOGIN_URL = `${BASE_URL}/login`; // 로그인 요청 url\nconst TOKEN_VALIDATE_URL = `${BASE_URL}/token-validate`; // 토큰 검증 요청 url\nconst TOKEN_REFRESH_URL = `${BASE_URL}/reissue`; // 엑세스 토큰 갱신\nconst USER_INFO_URL = `${BASE_URL}/api/users`; // 사용자 정보 가져오는 api\n\n// 사용자 정보 타입 정의\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  nickname: string;\n  membershipId: string;\n  // 필요한 필드를 여기에 추가하세요\n}\n\n// 로그인 요청\nexport const login = async (account: string, password: string) => {\n  try {\n    const response = await axios.post(LOGIN_URL, { account, password });\n    const { jwtToken, refreshToken, nickName, membershipId } = response.data; // 서버 응답에서 jwtToken, refreshToken, nickName, membershipId 추출\n\n    setTokens(jwtToken, refreshToken); // 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('nickname', nickName);\n    localStorage.setItem('membershipId', membershipId);\n\n    setAxiosDefaults();\n\n    return response.data;\n  } catch (error) {\n    console.error('로그인 실패:', error);\n    throw error;\n  }\n};\n\n// 토큰 검증 요청\nexport const validateToken = async (accessToken: string): Promise<boolean> => {\n  try {\n    const response = await axios.post(TOKEN_VALIDATE_URL, { jwtToken: accessToken });\n    return response.data === true;\n  } catch (error) {\n    console.error('토큰 검증 실패:', error);\n    return false;\n  }\n};\n\n// 리프레시 토큰을 통한 액세스 토큰 갱신 요청\nexport const refreshAccessToken = async (\n  membershipId: string,\n  accessToken: string,\n  refreshToken: string\n): Promise<string | null> => {\n  try {\n    const response = await axios.post(TOKEN_REFRESH_URL, {\n      membershipId,\n      jwtToken: accessToken,\n      refreshToken,\n    });\n\n    const { jwtToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\n    setTokens(newAccessToken, newRefreshToken); // 갱신된 refreshToken도 로컬 스토리지에 저장\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    clearTokens();\n    return null;\n  }\n};\n\n// 사용자 정보 요청\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  try {\n    const membershipId = localStorage.getItem('membershipId');\n    if (!membershipId) {\n      throw new Error('Membership ID not available');\n    }\n\n    const accessToken = await getValidAccessToken();\n    if (!accessToken) {\n      throw new Error('Access token not available');\n    }\n\n    // API 요청 보내기\n    const response = await axios.get<UserInfo>(`${USER_INFO_URL}/${membershipId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// 토큰 관리 함수\nexport const setTokens = (accessToken: string, refreshToken: string) => {\n  localStorage.setItem('jwtToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const getAccessToken = () => localStorage.getItem('jwtToken');\nexport const getRefreshToken = () => localStorage.getItem('refreshToken');\nexport const getMembershipId = () => localStorage.getItem('membershipId');\n\nexport const clearTokens = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('membershipId');\n};\n\n// 유효한 액세스 토큰을 반환하는 함수\nexport const getValidAccessToken = async (): Promise<string | null> => {\n  const accessToken = getAccessToken(); // jwtToken을 accessToken으로 대체\n  if (!accessToken) {\n    return null;\n  }\n\n  const isValid = await validateToken(accessToken); // accessToken으로 유효성 검사\n  if (!isValid) {\n    const refreshToken = getRefreshToken();\n    const membershipId = getMembershipId();\n    if (refreshToken && membershipId) {\n      const newAccessToken = await refreshAccessToken(membershipId, accessToken, refreshToken); // 새로운 accessToken으로 갱신\n      return newAccessToken;\n    }\n    return null;\n  }\n\n  return accessToken; // 유효한 accessToken 반환\n};\n\n// Axios 기본 헤더 설정\nexport const setAxiosDefaults = () => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/notice/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./board.module.css\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { getAccessToken } from \"../../../token\";\n\nconst API_BASE_URL =\n  process.env.NEXT_PUBLIC_API_BASE_URL ||\n  \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com\";\n\ninterface Post {\n  id: number;\n  title: string;\n  creator: string;\n  lastModified: string;\n  formattedDate: string;\n}\n\ninterface ApiResponse {\n  result: {\n    content: Post[];\n    totalPages: number;\n  };\n}\n\nconst BoardPage = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [sortByDateNewest, setSortByDateNewest] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const router = useRouter();\n\n  const fetchPosts = async (): Promise<void> => {\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/api/boards?type=ANNOUNCE&page=${currentPage}&size=25&sortByNewest=${sortByDateNewest}&search=${encodeURIComponent(\n          searchTerm\n        )}`,\n        {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"공지사항을 불러오는 데 실패했습니다.\");\n      }\n\n      const data: ApiResponse = await response.json();\n      const formattedPosts = data.result.content.map((post) => ({\n        ...post,\n        id: Number(post.id),\n        formattedDate: new Date(post.lastModified).toLocaleDateString(),\n      }));\n\n      setPosts(formattedPosts);\n      setTotalPages(data.result.totalPages);\n    } catch (err: unknown) {\n      setError((err instanceof Error ? err.message : \"공지사항을 불러오는 중 오류가 발생했습니다.\"));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkLoginStatus = (): void => {\n    const token = getAccessToken();\n    setIsLoggedIn(!!token);\n\n    if (token) {\n      const nickName = localStorage.getItem(\"nickName\") || \"\";\n      setIsAdmin(nickName === \"관리자\");\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    setCurrentPage(0);\n    fetchPosts();\n  };\n\n  useEffect(() => {\n    fetchPosts();\n    checkLoginStatus();\n  }, [sortByDateNewest, currentPage, searchTerm]);\n\n  const toggleSortByDate = (): void => {\n    setSortByDateNewest((prev) => !prev);\n    setCurrentPage(0);\n  };\n\n  const goToPage = (page: number): void => {\n    if (page >= 0 && page < totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  const handleWritePost = async (): Promise<void> => {\n    if (!isLoggedIn) {\n      alert(\"로그인이 필요합니다.\");\n      router.push(\"/login\");\n      return;\n    }\n\n    const token = getAccessToken();\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/token-validate`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          jwtToken: token,\n        }),\n      });\n\n      const data: boolean = await response.json();\n\n      if (response.ok && data) {\n        router.push(\"/board/write\");\n      } else {\n        alert(\"토큰이 유효하지 않습니다.\");\n      }\n    } catch (err: unknown) {\n      alert(\"토큰 검증 중 오류가 발생했습니다.\");\n      console.error(err);\n    }\n  };\n\n  return (\n    <section className={styles.notice}>\n      <div className={styles.pageTitle}>\n        <div className={styles.container}>\n          <h3>공지사항</h3>\n        </div>\n      </div>\n\n      <div id=\"board-list\">\n        <div className={styles.container}>\n          {loading ? (\n            <div className={styles.loadingMessage}>\n              공지사항을 불러오는 중입니다...\n            </div>\n          ) : error ? (\n            <div className={styles.loadingMessage}>{error}</div>\n          ) : (\n            <>\n              <table className={styles.boardTable}>\n                <thead>\n                  <tr>\n                    <th>번호</th>\n                    <th className={styles.thTitle}>제목</th>\n                    <th className={styles.thAuthor}>작성자</th>\n                    <th\n                      onClick={toggleSortByDate}\n                      className={`${styles.cursorPointer} ${\n                        sortByDateNewest ? styles.sortedAsc : styles.sortedDesc\n                      }`}\n                    >\n                      등록일\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {posts.length ? (\n                    posts.map((post, index) => (\n                      <tr key={post.id}>\n                        <td>\n                          {sortByDateNewest\n                            ? currentPage * 25 + index + 1\n                            : totalPages * 25 -\n                              (currentPage * 25 + index)}\n                        </td>\n                        <td>\n                          <Link href={`/board/view/${post.id}`}>\n                            {post.title}\n                          </Link>\n                        </td>\n                        <td>{post.creator}</td>\n                        <td>{post.formattedDate}</td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={4}>공지사항이 없습니다.</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n\n              <div className={styles.pagination}>\n                {Array.from({ length: totalPages }, (_, index) => (\n                  <span\n                    key={index}\n                    className={`${styles.pageNumber} ${\n                      index === currentPage ? styles.active : \"\"\n                    }`}\n                    onClick={() => goToPage(index)}\n                  >\n                    {index + 1}\n                  </span>\n                ))}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div id=\"board-search\">\n        <div className={styles.container}>\n          <div className={styles.searchWindow}>\n            <form onSubmit={handleSearch}>\n              <div className={styles.searchWrap}>\n                <input\n                  type=\"search\"\n                  placeholder=\"제목으로 검색\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <button\n                  type=\"submit\"\n                  className={`${styles.btn} ${styles.btnDark}`}\n                >\n                  검색\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      {isAdmin && (\n        <div className={styles.writeBtnWrap}>\n          <div className={styles.container}>\n            <button\n              type=\"button\"\n              className={styles.btn}\n              onClick={handleWritePost}\n            >\n              공지사항 작성\n            </button>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default BoardPage;\n"],"names":[],"mappings":"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","debugId":null}}]
}