{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/token.ts"],"sourcesContent":["import axios from 'axios';\n\n// API URLs\nconst BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com'; // api 기본주소\nconst LOGIN_URL = `${BASE_URL}/login`; // 로그인 요청 url\nconst TOKEN_VALIDATE_URL = `${BASE_URL}/token-validate`; // 토큰 검증 요청 url\nconst TOKEN_REFRESH_URL = `${BASE_URL}/reissue`; // 엑세스 토큰 갱신\nconst USER_INFO_URL = `${BASE_URL}/api/users`; // 사용자 정보 가져오는 api\n\n// 사용자 정보 타입 정의\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  nickname: string;\n  membershipId: string;\n  // 필요한 필드를 여기에 추가하세요\n}\n\n// 로그인 요청\nexport const login = async (account: string, password: string) => {\n  try {\n    const response = await axios.post(LOGIN_URL, { account, password });\n    const { jwtToken, refreshToken, nickName, membershipId } = response.data; // 서버 응답에서 jwtToken, refreshToken, nickName, membershipId 추출\n\n    setTokens(jwtToken, refreshToken); // 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('nickname', nickName);\n    localStorage.setItem('membershipId', membershipId);\n\n    setAxiosDefaults();\n\n    return response.data;\n  } catch (error) {\n    console.error('로그인 실패:', error);\n    throw error;\n  }\n};\n\n// 토큰 검증 요청\nexport const validateToken = async (accessToken: string): Promise<boolean> => {\n  try {\n    const response = await axios.post(TOKEN_VALIDATE_URL, { jwtToken: accessToken });\n    return response.data === true;\n  } catch (error) {\n    console.error('토큰 검증 실패:', error);\n    return false;\n  }\n};\n\n// 리프레시 토큰을 통한 액세스 토큰 갱신 요청\nexport const refreshAccessToken = async (\n  membershipId: string,\n  accessToken: string,\n  refreshToken: string\n): Promise<string | null> => {\n  try {\n    const response = await axios.post(TOKEN_REFRESH_URL, {\n      membershipId,\n      jwtToken: accessToken,\n      refreshToken,\n    });\n\n    const { jwtToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\n    setTokens(newAccessToken, newRefreshToken); // 갱신된 refreshToken도 로컬 스토리지에 저장\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    clearTokens();\n    return null;\n  }\n};\n\n// 사용자 정보 요청\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  try {\n    const membershipId = localStorage.getItem('membershipId');\n    if (!membershipId) {\n      throw new Error('Membership ID not available');\n    }\n\n    const accessToken = await getValidAccessToken();\n    if (!accessToken) {\n      throw new Error('Access token not available');\n    }\n\n    // API 요청 보내기\n    const response = await axios.get<UserInfo>(`${USER_INFO_URL}/${membershipId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// 토큰 관리 함수\nexport const setTokens = (accessToken: string, refreshToken: string) => {\n  localStorage.setItem('jwtToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const getAccessToken = () => localStorage.getItem('jwtToken');\nexport const getRefreshToken = () => localStorage.getItem('refreshToken');\nexport const getMembershipId = () => localStorage.getItem('membershipId');\n\nexport const clearTokens = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('membershipId');\n};\n\n// 유효한 액세스 토큰을 반환하는 함수\nexport const getValidAccessToken = async (): Promise<string | null> => {\n  const accessToken = getAccessToken(); // jwtToken을 accessToken으로 대체\n  if (!accessToken) {\n    return null;\n  }\n\n  const isValid = await validateToken(accessToken); // accessToken으로 유효성 검사\n  if (!isValid) {\n    const refreshToken = getRefreshToken();\n    const membershipId = getMembershipId();\n    if (refreshToken && membershipId) {\n      const newAccessToken = await refreshAccessToken(membershipId, accessToken, refreshToken); // 새로운 accessToken으로 갱신\n      return newAccessToken;\n    }\n    return null;\n  }\n\n  return accessToken; // 유효한 accessToken 반환\n};\n\n// Axios 기본 헤더 설정\nexport const setAxiosDefaults = () => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/board/view/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from 'next/navigation';\nimport axios from 'axios';\nimport '../../../../public/styles/game_start.css';\nimport { getAccessToken, getValidAccessToken, getMembershipId } from '../../../../../token';\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com/api/wargame-problems\";\nconst FILE_BASE_URL = API_BASE_URL.replace('/api/wargame-problems', '') || \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com\";\n\ninterface Problem {\n  title: string;\n  creator: string;\n  level: number;\n  problemFile?: string;\n  content: string;\n  dockerfileLink?: string;\n}\n\ninterface Ranking {\n  nickname: string;\n  created: string;\n}\n\ninterface ApiResponse<T> {\n  result: T;\n}\n\nconst CTFProblemPage = () => {\n  const params = useParams();\n  const problemId = params?.id || \"6\";\n\n  const [problem, setProblem] = useState<Problem | null>(null);\n  const [flag, setFlag] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [comments, setComments] = useState<string[]>([]);\n  const [newComment, setNewComment] = useState<string>(\"\");\n  const [ranking, setRanking] = useState<Ranking[]>([]);\n  const [vmAddress, setVmAddress] = useState<string>(\"\");\n  const [token, setToken] = useState<string | null>(null);\n  const [isTokenLoaded, setIsTokenLoaded] = useState(false);\n\n  useEffect(() => {\n    const storedToken = getAccessToken();\n    setToken(storedToken);\n    setIsTokenLoaded(true); // 토큰 로딩 완료\n  }, []);\n\n  useEffect(() => {\n    if (!isTokenLoaded) return; // 토큰 로딩 완료 전에는 실행하지 않음\n\n    if (!token) {\n      alert(\"토큰이 존재하지 않습니다. 로그인 후 다시 시도해주세요.\");\n      return;\n    }\n\n    // 문제 데이터 가져오기\n    const fetchProblem = async () => {\n      try {\n        const res = await fetch(`${API_BASE_URL}/${problemId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*',\n          },\n        });\n\n        if (!res.ok) {\n          throw new Error(`문제 API 호출 실패: ${res.status} ${res.statusText}`);\n        }\n\n        const data: ApiResponse<Problem> = await res.json();\n        setProblem(data.result);\n      } catch (error) {\n        console.error(\"문제 가져오기 실패:\", error);\n      }\n    };\n\n    // 랭킹 데이터 가져오기\n    const fetchRanking = async () => {\n      try {\n        const res = await fetch(`${FILE_BASE_URL}/api/problems/${problemId}/firstblood?size=3`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*',\n          },\n        });\n\n        if (!res.ok) {\n          throw new Error(`랭킹 API 호출 실패: ${res.status} ${res.statusText}`);\n        }\n\n        const data: ApiResponse<Ranking[]> = await res.json();\n        setRanking(data.result);\n      } catch (error) {\n        console.error(\"랭킹 조회 실패:\", error);\n      }\n    };\n\n    fetchProblem();\n    fetchRanking();\n  }, [problemId, token, isTokenLoaded]);\n\n  const handleSubmit = async () => {\n    if (!token) return;\n\n    try {\n      const url = `${FILE_BASE_URL}/api/problems/${problemId}/solve?flag=${encodeURIComponent(flag)}`;\n\n      const res = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Accept\": \"*/*\",\n        },\n      });\n\n      if (!res.ok) {\n        setMessage(\"정답 확인 중 오류가 발생했습니다.\");\n        return;\n      }\n\n      const data = await res.json();\n      setMessage(data.result ? \"정답입니다! 축하합니다.\" : \"오답입니다. 다시 시도하세요.\");\n    } catch (error) {\n      console.error(\"정답 확인 실패:\", error);\n      setMessage(\"정답 확인 중 오류가 발생했습니다.\");\n    }\n  };\n\n  const handleAddComment = () => {\n    if (newComment.trim() !== \"\") {\n      setComments([...comments, newComment]);\n      setNewComment(\"\");\n    }\n  };\n\n  const handleShowVmAddress = () => {\n    setVmAddress(problem?.dockerfileLink || \"VM 주소가 제공되지 않았습니다.\");\n  };\n\n  const handleDeleteProblem = async () => {\n    if (!token) {\n      alert(\"토큰이 존재하지 않습니다.\");\n      return;\n    }\n\n    try {\n      const accessToken = await getValidAccessToken();\n      const membershipId = getMembershipId();\n\n      if (!accessToken || !membershipId) {\n        alert(\"로그인 상태가 아닙니다.\");\n        return;\n      }\n\n      const response = await axios.delete(`${API_BASE_URL}/${problemId}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.status === 200) {\n        alert(\"게시글이 성공적으로 삭제되었습니다.\");\n        // 삭제 후, 페이지 리디렉션 또는 상태 갱신 등의 처리\n      }\n    } catch (error) {\n      console.error(\"게시글 삭제 실패:\", error);\n      alert(\"게시글 삭제에 실패했습니다.\");\n    }\n  };\n\n  if (!problem) return <div>로딩 중...</div>;\n\n  const formatTime = (timeString: string) => {\n    const date = new Date(timeString);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day} ${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <h1>\n          {problem.title}{\" \"}\n          <span style={{fontSize: '0.5em'}}>made by {problem.creator}</span>\n        </h1>\n\n        <p>\n          Level: <span style={{color: \"gold\"}}>{'⭐'.repeat(problem.level)}</span>\n        </p>\n\n        {problem.problemFile ? (\n          <p>\n            문제 파일:{\" \"}\n            <a\n              href={`${FILE_BASE_URL}/${problemId}/download`}\n              download\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              style={{color: \"blue\", textDecoration: \"underline\"}}\n            >\n              다운로드\n            </a>\n          </p>\n        ) : (\n          <p>문제 파일 없음</p>\n        )}\n        <p>{problem.content}</p>\n\n        <input\n          type=\"text\"\n          placeholder=\"플래그를 입력하세요\"\n          value={flag}\n          onChange={(e) => setFlag(e.target.value)}\n          className=\"input\"\n        />\n        <button onClick={handleSubmit} className=\"button\">제출</button>\n        {message && <p className=\"message\">{message}</p>}\n\n        {/* 게시글 삭제 버튼 */}\n        <button onClick={handleDeleteProblem} className=\"delete-button\">\n          게시글 삭제\n        </button>\n      </div>\n\n      <div className=\"ranking-box\">\n        <h3>랭킹</h3>\n        {ranking.length > 0 ? (\n          ranking.map((user, index) => (\n            <div key={index} className=\"ranking-item\">\n              <span className=\"rank\">\n                {index === 0 ? \"👑\" : index + 1}\n              </span>\n              <span className=\"username\">{user.nickname}</span>\n              <span className=\"solved-time\">{formatTime(user.created)}</span>\n            </div>\n          ))\n        ) : (\n          <p>아직 풀이한 사용자가 없습니다.</p>\n        )}\n      </div>\n\n      <div className=\"card\">\n        <h2>VM 주소</h2>\n        <button onClick={handleShowVmAddress} className=\"button vm-button\">\n          VM 주소 보기\n        </button>\n        {vmAddress && <p className=\"vm-address\">{vmAddress}</p>}\n      </div>\n\n      <div className=\"card\">\n        <h2>댓글</h2>\n        <textarea\n          className=\"textarea\"\n          placeholder=\"댓글을 작성하세요\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n        ></textarea>\n        <button onClick={handleAddComment} className=\"submit-button comment-button\">\n          댓글 작성\n        </button>\n        <div className=\"comment-list\">\n          {comments.map((comment, index) => (\n            <div key={index} className=\"comment-item\">\n              <p className=\"comment-text\">{comment}</p>\n              <div className=\"reply-section\">\n                <button className=\"reply-button\">대댓글</button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CTFProblemPage;\n"],"names":[],"mappings":"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","debugId":null}}]
}