{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/token.ts"],"sourcesContent":["import axios from 'axios';\n\n// API URLs\nconst BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com'; // api 기본주소\nconst LOGIN_URL = `${BASE_URL}/login`; // 로그인 요청 url\nconst TOKEN_VALIDATE_URL = `${BASE_URL}/token-validate`; // 토큰 검증 요청 url\nconst TOKEN_REFRESH_URL = `${BASE_URL}/reissue`; // 엑세스 토큰 갱신\nconst USER_INFO_URL = `${BASE_URL}/api/users`; // 사용자 정보 가져오는 api\n\n// 사용자 정보 타입 정의\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  nickname: string;\n  membershipId: string;\n  // 필요한 필드를 여기에 추가하세요\n}\n\n// 로그인 요청\nexport const login = async (account: string, password: string) => {\n  try {\n    const response = await axios.post(LOGIN_URL, { account, password });\n    const { jwtToken, refreshToken, nickName, membershipId } = response.data; // 서버 응답에서 jwtToken, refreshToken, nickName, membershipId 추출\n\n    setTokens(jwtToken, refreshToken); // 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('nickname', nickName);\n    localStorage.setItem('membershipId', membershipId);\n\n    setAxiosDefaults();\n\n    return response.data;\n  } catch (error) {\n    console.error('로그인 실패:', error);\n    throw error;\n  }\n};\n\n// 토큰 검증 요청\nexport const validateToken = async (accessToken: string): Promise<boolean> => {\n  try {\n    const response = await axios.post(TOKEN_VALIDATE_URL, { jwtToken: accessToken });\n    return response.data === true;\n  } catch (error) {\n    console.error('토큰 검증 실패:', error);\n    return false;\n  }\n};\n\n// 리프레시 토큰을 통한 액세스 토큰 갱신 요청\nexport const refreshAccessToken = async (\n  membershipId: string,\n  accessToken: string,\n  refreshToken: string\n): Promise<string | null> => {\n  try {\n    const response = await axios.post(TOKEN_REFRESH_URL, {\n      membershipId,\n      jwtToken: accessToken,\n      refreshToken,\n    });\n\n    const { jwtToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\n    setTokens(newAccessToken, newRefreshToken); // 갱신된 refreshToken도 로컬 스토리지에 저장\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('토큰 갱신 실패:', error);\n    clearTokens();\n    return null;\n  }\n};\n\n// 사용자 정보 요청\nexport const getUserInfo = async (): Promise<UserInfo> => {\n  try {\n    const membershipId = localStorage.getItem('membershipId');\n    if (!membershipId) {\n      throw new Error('Membership ID not available');\n    }\n\n    const accessToken = await getValidAccessToken();\n    if (!accessToken) {\n      throw new Error('Access token not available');\n    }\n\n    // API 요청 보내기\n    const response = await axios.get<UserInfo>(`${USER_INFO_URL}/${membershipId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// 토큰 관리 함수\nexport const setTokens = (accessToken: string, refreshToken: string) => {\n  localStorage.setItem('jwtToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const getAccessToken = () => localStorage.getItem('jwtToken');\nexport const getRefreshToken = () => localStorage.getItem('refreshToken');\nexport const getMembershipId = () => localStorage.getItem('membershipId');\n\nexport const clearTokens = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('membershipId');\n};\n\n// 유효한 액세스 토큰을 반환하는 함수\nexport const getValidAccessToken = async (): Promise<string | null> => {\n  const accessToken = getAccessToken(); // jwtToken을 accessToken으로 대체\n  if (!accessToken) {\n    return null;\n  }\n\n  const isValid = await validateToken(accessToken); // accessToken으로 유효성 검사\n  if (!isValid) {\n    const refreshToken = getRefreshToken();\n    const membershipId = getMembershipId();\n    if (refreshToken && membershipId) {\n      const newAccessToken = await refreshAccessToken(membershipId, accessToken, refreshToken); // 새로운 accessToken으로 갱신\n      return newAccessToken;\n    }\n    return null;\n  }\n\n  return accessToken; // 유효한 accessToken 반환\n};\n\n// Axios 기본 헤더 설정\nexport const setAxiosDefaults = () => {\n  const accessToken = getAccessToken();\n  if (accessToken) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/board/write/BoardWritePage.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"boardWrite\": \"BoardWritePage-module__4WtIZW__boardWrite\",\n  \"btn\": \"BoardWritePage-module__4WtIZW__btn\",\n  \"container\": \"BoardWritePage-module__4WtIZW__container\",\n  \"editorContainer\": \"BoardWritePage-module__4WtIZW__editorContainer\",\n  \"formGroup\": \"BoardWritePage-module__4WtIZW__formGroup\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/board/write/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { getValidAccessToken, clearTokens, getMembershipId } from '../../../../token';\nimport styles from './BoardWritePage.module.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\n\n// ToastEditor 타입을 가져오기\nimport { Editor as ToastEditorInstance } from '@toast-ui/react-editor';\n\nconst ToastEditor = dynamic(() => import('@toast-ui/react-editor').then((mod) => mod.Editor), {\n  ssr: false,\n});\n\nconst API_BASE_URL = 'https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com';\n\nconst BoardWritePage = () => {\n  const [title, setTitle] = useState('');\n  const editorRef = useRef<ToastEditorInstance>(null);  // 타입을 지정\n  const router = useRouter();\n\n  useEffect(() => {\n    const storedMembershipId = getMembershipId();\n\n    if (!storedMembershipId) {\n      alert('로그인이 필요합니다.');\n      clearTokens();\n      router.push('/login');\n      return;\n    }\n\n    const loadToken = async () => {\n      const token = await getValidAccessToken();\n      if (!token) {\n        alert('로그인이 만료되었습니다. 다시 로그인 해주세요.');\n        clearTokens();\n        router.push('/login');\n      }\n    };\n\n    loadToken();\n  }, [router]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const contents = editorRef.current?.getInstance().getMarkdown();\n\n    if (!title.trim() || !contents.trim()) {\n      alert('제목과 내용을 모두 입력해 주세요.');\n      return;\n    }\n\n    const postData = { title, type: 'FREE', contents };\n\n    try {\n      const accessToken = await getValidAccessToken();\n      if (!accessToken) {\n        alert('로그인이 만료되었습니다. 다시 로그인 해주세요.');\n        clearTokens();\n        router.push('/login');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/api/boards`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n        body: JSON.stringify(postData),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert('로그인이 만료되었습니다.');\n          clearTokens();\n          router.push('/login');\n          return;\n        } else if (response.status === 403) {\n          alert('권한이 없습니다.');\n          return;\n        }\n        throw new Error(await response.text());\n      }\n\n      setTitle('');\n      editorRef.current?.getInstance().setMarkdown('');\n      router.push('/board');\n    } catch (error) {\n      console.error('게시글 등록 오류:', error);\n      alert('게시글 등록에 실패했습니다. 다시 시도해 주세요.');\n    }\n  };\n\n  return (\n    <div className={styles.boardWrite}>\n      <div className={styles.container}>\n        <h3>게시글 작성</h3>\n        <form onSubmit={handleSubmit}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"title\">제목</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n          </div>\n          <div className={styles.formGroup} style={{ marginTop: '20px' }}>\n            <label htmlFor=\"content\">내용</label>\n            <ToastEditor ref={editorRef} initialValue=\"\" height=\"500px\" />\n          </div>\n          <div style={{ marginTop: '20px', textAlign: 'center' }}>\n            <button type=\"submit\" className={styles.btn}>\n              게시글 작성\n            </button>\n          </div>\n        </form>\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <Link href=\"/board\">게시판 목록으로 이동</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BoardWritePage;\n"],"names":[],"mappings":"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","debugId":null}}]
}