{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/notice/board.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"board-module__FJwxpW__active\",\n  \"boardTable\": \"board-module__FJwxpW__boardTable\",\n  \"btn\": \"board-module__FJwxpW__btn\",\n  \"btnDark\": \"board-module__FJwxpW__btnDark\",\n  \"btnLight\": \"board-module__FJwxpW__btnLight\",\n  \"container\": \"board-module__FJwxpW__container\",\n  \"cursorPointer\": \"board-module__FJwxpW__cursorPointer\",\n  \"errorMessage\": \"board-module__FJwxpW__errorMessage\",\n  \"loadingMessage\": \"board-module__FJwxpW__loadingMessage\",\n  \"notice\": \"board-module__FJwxpW__notice\",\n  \"pageNumber\": \"board-module__FJwxpW__pageNumber\",\n  \"pageTitle\": \"board-module__FJwxpW__pageTitle\",\n  \"pagination\": \"board-module__FJwxpW__pagination\",\n  \"searchWindow\": \"board-module__FJwxpW__searchWindow\",\n  \"searchWrap\": \"board-module__FJwxpW__searchWrap\",\n  \"sortedAsc\": \"board-module__FJwxpW__sortedAsc\",\n  \"sortedDesc\": \"board-module__FJwxpW__sortedDesc\",\n  \"spin\": \"board-module__FJwxpW__spin\",\n  \"spinner\": \"board-module__FJwxpW__spinner\",\n  \"thAuthor\": \"board-module__FJwxpW__thAuthor\",\n  \"thDate\": \"board-module__FJwxpW__thDate\",\n  \"thNum\": \"board-module__FJwxpW__thNum\",\n  \"thTitle\": \"board-module__FJwxpW__thTitle\",\n  \"writeBtnWrap\": \"board-module__FJwxpW__writeBtnWrap\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/src/app/notice/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./board.module.css\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { getToken } from \"../../../token\";  // getValidJwtToken 대신\n\nconst API_BASE_URL =\n  process.env.NEXT_PUBLIC_API_BASE_URL ||\n  \"https://ec2-3-34-134-27.ap-northeast-2.compute.amazonaws.com\";\n\n// 게시글 타입 정의\ninterface Post {\n  id: number;\n  title: string;\n  creator: string;\n  lastModified: string;\n  formattedDate: string;\n}\n\ninterface BoardResponse {\n  result: {\n    content: Post[];\n    totalPages: number;\n    totalElements: number;\n  };\n}\n\nconst PAGE_SIZE = 25; // 페이지 크기를 상수로 관리\n\nconst BoardPage = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [sortByDateNewest, setSortByDateNewest] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalElements, setTotalElements] = useState(0);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n  const router = useRouter();\n\n  const maxPageButtons = 5;\n\n  const pageGroupStart = Math.floor(currentPage / maxPageButtons) * maxPageButtons;\n  const pageGroupEnd = Math.min(pageGroupStart + maxPageButtons, totalPages);\n\n  const fetchPosts = async () => {\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const endpoint = searchTerm\n        ? `${API_BASE_URL}/api/boards/search?type=ANNOUNCE&keyword=${encodeURIComponent(searchTerm)}&page=${currentPage}&size=${PAGE_SIZE}`\n        : `${API_BASE_URL}/api/boards?type=ANNOUNCE&page=${currentPage}&size=${PAGE_SIZE}&sortByNewest=${sortByDateNewest}`;\n\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${await getToken()}`,  // 토큰 검증 후 설정\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"공지사항을 불러오는 데 실패했습니다.\");\n      }\n\n      const data: BoardResponse = await response.json();\n      const formattedPosts = data.result.content.map((post) => ({\n        ...post,\n        formattedDate: new Date(post.lastModified).toLocaleDateString(),\n      }));\n\n      setPosts(formattedPosts);\n      setTotalPages(data.result.totalPages);\n      setTotalElements(data.result.totalElements);\n    } catch (err: unknown) {\n      setError(\n        err instanceof Error\n          ? err.message\n          : \"공지사항을 불러오는 중 오류가 발생했습니다.\"\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkLoginStatus = async () => {\n    const token = await getToken();\n    setIsLoggedIn(!!token);\n\n    // JWT 토큰에서 \"role\"을 추출하여 \"ROLE_ADMIN\"인지 확인\n    if (token) {\n      const role = JSON.parse(atob(token.split('.')[1])).role;\n      setIsAdmin(role === \"ROLE_ADMIN\");\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setCurrentPage(0);\n    fetchPosts();\n  };\n\n  const toggleSortByDate = () => {\n    setSortByDateNewest((prev) => !prev);\n    setCurrentPage(0);\n  };\n\n  const goToPage = (page: number) => {\n    if (page >= 0 && page < totalPages) {\n      setCurrentPage(page);\n      fetchPosts();\n    } else {\n      alert(\"유효하지 않은 페이지입니다.\");\n    }\n  };\n\n  const handleWritePost = async () => {\n    const token = await getToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      router.push(\"/login\");\n      return;\n    }\n\n    // JWT 토큰에서 \"role\"을 추출하여 \"ROLE_ADMIN\"인지 확인\n    const role = JSON.parse(atob(token.split('.')[1])).role;\n    if (role !== \"ROLE_ADMIN\") {\n      alert(\"관리자만 공지사항을 작성할 수 있습니다.\");\n      return;\n    }\n\n    router.push(\"/board/write\");\n  };\n\n  useEffect(() => {\n    fetchPosts();\n    checkLoginStatus();\n  }, [sortByDateNewest, currentPage]);\n\n  return (\n    <section className={styles.notice}>\n      <div className={styles.pageTitle}>\n        <div className={styles.container}>\n          <h3>공지사항</h3>\n        </div>\n      </div>\n\n      <div id=\"board-list\">\n        <div className={styles.container}>\n          {loading ? (\n            <div className={styles.loadingMessage}>\n              게시글을 불러오는 중입니다...\n            </div>\n          ) : error ? (\n            <div className={styles.loadingMessage}>{error}</div>\n          ) : (\n            <>\n              <table className={styles.boardTable}>\n                <thead>\n                  <tr>\n                    <th>번호</th>\n                    <th className={styles.thTitle}>제목</th>\n                    <th className={styles.thAuthor}>작성자</th>\n                    <th\n                      onClick={toggleSortByDate}\n                      className={`${styles.cursorPointer} ${\n                        sortByDateNewest ? styles.sortedAsc : styles.sortedDesc\n                      }`}\n                    >\n                      등록일\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {posts.length ? (\n                    posts.map((post, index) => (\n                      <tr key={post.id}>\n                        <td>\n                          {sortByDateNewest\n                            ? totalElements - (currentPage * PAGE_SIZE + index)\n                            : currentPage * PAGE_SIZE + index + 1}\n                        </td>\n                        <td>\n                          <Link href={`/board/view/${post.id}`}>\n                            {post.title}\n                          </Link>\n                        </td>\n                        <td>{post.creator}</td>\n                        <td>{post.formattedDate}</td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={4}>공지사항이 없습니다.</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n\n              <div className={styles.pagination}>\n                {currentPage > 0 && (\n                  <span\n                    className={styles.pageNumber}\n                    onClick={() => goToPage(0)}\n                  >\n                    {\"<<\"}\n                  </span>\n                )}\n\n                {currentPage > maxPageButtons - 1 && (\n                  <span\n                    className={styles.pageNumber}\n                    onClick={() => goToPage(currentPage - maxPageButtons)}\n                  >\n                    {\"<\"}\n                  </span>\n                )}\n\n                {Array.from({ length: pageGroupEnd - pageGroupStart }, (_, index) => (\n                  <span\n                    key={pageGroupStart + index}\n                    className={`${styles.pageNumber} ${\n                      currentPage === pageGroupStart + index ? styles.active : \"\"\n                    }`}\n                    onClick={() => goToPage(pageGroupStart + index)}\n                  >\n                    {pageGroupStart + index + 1}\n                  </span>\n                ))}\n\n                {currentPage < totalPages - maxPageButtons && (\n                  <span\n                    className={styles.pageNumber}\n                    onClick={() => goToPage(currentPage + maxPageButtons)}\n                  >\n                    {\">\"}\n                  </span>\n                )}\n\n                {currentPage < totalPages - 1 && (\n                  <span\n                    className={styles.pageNumber}\n                    onClick={() => goToPage(totalPages - 1)}\n                  >\n                    {\">>\"}\n                  </span>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div id=\"board-search\">\n        <div className={styles.container}>\n          <div className={styles.searchWindow}>\n            <form onSubmit={handleSearch}>\n              <div className={styles.searchWrap}>\n                <input\n                  type=\"search\"\n                  placeholder=\"제목으로 검색\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <button\n                  type=\"submit\"\n                  className={`${styles.btn} ${styles.btnDark}`}\n                >\n                  검색\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.writeBtnWrap}>\n        <div className={styles.container}>\n          {isAdmin && (\n            <button\n              type=\"button\"\n              className={styles.btn}\n              onClick={handleWritePost}\n            >\n              공지사항 작성\n            </button>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default BoardPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///Users/haemul/Desktop/docu/hpground/hpg/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}